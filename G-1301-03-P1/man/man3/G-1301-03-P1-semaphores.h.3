.TH "includes/G-1301-03-P1-semaphores.h" 3 "Thu Mar 13 2014" "Version 1.0" "G-1301-03-P1" \" -*- nroff -*-
.ad l
.nh
.SH NAME
includes/G-1301-03-P1-semaphores.h \- 
.SH SYNOPSIS
.br
.PP
.SS "Functions"

.in +1c
.ti -1c
.RI "int \fBsemaphore_new\fP ()"
.br
.RI "\fIIt creates a new semaphore initialized with value 1\&. \fP"
.ti -1c
.RI "int \fBsemaphore_rm\fP (int sem_id)"
.br
.RI "\fIRemoves a semaphore\&. \fP"
.ti -1c
.RI "int \fBsemaphore_br\fP (int *readers_num, int readers, int writer, int mutex_access, int mutex_rvariables)"
.br
.RI "\fIProtects a critical section for being modified when reading\&. \fP"
.ti -1c
.RI "int \fBsemaphore_ar\fP (int *readers_num, int writer, int mutex_rvariables)"
.br
.RI "\fIDeprotects a critical section for being modified when reading\&. \fP"
.ti -1c
.RI "int \fBsemaphore_bw\fP (int writer, int readers)"
.br
.RI "\fIProtects a critical section for being accessed when writing\&. \fP"
.ti -1c
.RI "int \fBsemaphore_aw\fP (int writer, int readers)"
.br
.RI "\fIDeprotects a critical section for being accessed when writing\&. \fP"
.in -1c
.SH "Detailed Description"
.PP 
Set of functions for semaphores management\&. 
.PP
\fBAuthor:\fP
.RS 4
Enrique Cabrerizo Fernandez and Guillermo Ruiz Alvarez
.RE
.PP

.SH "Function Documentation"
.PP 
.SS "int semaphore_ar (int *readers_num, intwriter, intmutex_rvariables)"

.PP
Deprotects a critical section for being modified when reading\&. It means the calling process/thread has called semaphore_br before and has just left it\&. If this function is not called after leaving a critical section, then the rest of processes/thread could be blocked before accessing it\&.
.PP
\fBParameters:\fP
.RS 4
\fIreaders_num\fP must be a global pointer to the number of readers, initialized to 0\&. 
.br
\fIwriter\fP semaphore initialized to 1\&. 
.br
\fImutex_rvariables\fP a global semaphore initialized to 1\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
OK on success\&. ERR if arguments are invalid\&. 
.RE
.PP

.SS "int semaphore_aw (intwriter, intreaders)"

.PP
Deprotects a critical section for being accessed when writing\&. It means the calling process/thread has called semaphore_bw before and has just left it\&. If this function is not called after leaving a critical section, then the rest of processes/thread could be blocked before accessing it\&.
.PP
\fBParameters:\fP
.RS 4
\fIwriter\fP a global semaphore initialized to 1\&. 
.br
\fIreaders\fP a global semaphore initialized to 1\&.
.RE
.PP
\fBReturns:\fP
.RS 4
OK on success\&. ERR if arguments are invalid\&. 
.RE
.PP

.SS "int semaphore_br (int *readers_num, intreaders, intwriter, intmutex_access, intmutex_rvariables)"

.PP
Protects a critical section for being modified when reading\&. If the critical section is being modified or there is any process/thread waiting to modify it, then the calling process/thread will wait for the critical section to be freed, therefore, the writers have the preference on such critical section\&. This function must be called before the reading critical section starts\&.
.PP
\fBParameters:\fP
.RS 4
\fIreaders_num\fP must be a global pointer to the number of readers, initialized to 0\&. 
.br
\fIreaders\fP a global semaphore initialized to 1\&. 
.br
\fIwriter\fP a global semaphore initialized to 1\&. 
.br
\fImutex_access\fP a global semaphore initialized to 1\&. 
.br
\fImutex_rvariables\fP a global semaphore initialized to 1\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
OK on success\&. ERR if arguments are invalid\&. 
.RE
.PP

.SS "int semaphore_bw (intwriter, intreaders)"

.PP
Protects a critical section for being accessed when writing\&. If the critical section is being read then the calling process/thread will wait for the critical section to be freed\&. The calling process/thread have prefefence over the rest, this means that if after the call any other process/thread try to access the critical section, it will wait for the calling process to finish its tasks\&. This function must be called before the writing critical section starts\&.
.PP
\fBParameters:\fP
.RS 4
\fIwriter\fP a global semaphore initialized to 1\&. 
.br
\fIreaders\fP a global semaphore initialized to 1\&.
.RE
.PP
\fBReturns:\fP
.RS 4
OK on success\&. ERR if arguments are invalid\&. 
.RE
.PP

.SS "int semaphore_new ()"

.PP
It creates a new semaphore initialized with value 1\&. 
.PP
\fBReturns:\fP
.RS 4
The identifier of the created semaphore\&. If it fails -1 is returned and the error is logged in the system log\&. 
.RE
.PP

.SS "int semaphore_rm (intsem_id)"

.PP
Removes a semaphore\&. All processed waiting for doing a down operation will be awoken\&.
.PP
\fBParameters:\fP
.RS 4
\fIsem_id\fP the identifier of the semaphore returned by semaphores_new\&. 
.RE
.PP
\fBReturns:\fP
.RS 4
OK on success\&. ERR if arguments are invalid (non-existing semaphore with sem_id) 
.RE
.PP

.SH "Author"
.PP 
Generated automatically by Doxygen for G-1301-03-P1 from the source code\&.
